单例模式：
    优点：
        在内存中只有一个实例，减少了内存开销。
        可以避免对资源的多重占用。
        设置全局访问点，严格控制访问。
    缺点：
        没有接口，扩展困难。
        如果要扩展单例对象，只有修改
    使用注意：
        私有化构造器
        保证线程安全
        延迟加载
        防止序列化和反序列化破坏单例
        防御反射攻击单例

恶汉式单例：空间换时间
    优点：没有锁、执行效率高,类加载的时候就已经初始化了
    缺点：类加载的时候就初始化，不使用就浪费了内存

懒汉式单例：时间换空间
    优点: 使用时再创建，不浪费空间
    缺点：不加同步的懒汉式是线程不安全的

注册式单例
    enum：推荐使用的单例模式
        优点：线程安全，防止反序列化破坏单例,从JDK层面就为枚举不被序列化和反射破坏保驾护航
        缺点：会造成一定的资源浪费，但是从JDK底层进行过优化的。
    容器式：Spring常用的单例模式
        优点：适用于创建实例非常多的情况，对象便于管理
        缺点：非线程安全的

    ThreadLocal 线程单例:
        优点：伪线程安全的，
        缺点：不能保证其创建的对象是全局唯一，但是能保证在单个线程中是唯一的


破坏单例模式的方式：
线程安全
反射
反序列化